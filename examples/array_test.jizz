// Array Operations Test
// This file tests the improved array functionality in JIZZ

buss("=== Array Test: Basic Operations ===");

// Create a simple array
let arr = [1, 2, 3, 4, 5];
buss("Initial array:", arr);

// Test array indexing
buss("arr[0] =", arr[0]);
buss("arr[4] =", arr[4]);

// Test array index assignment
arr[2] = 99;
buss("After arr[2] = 99:", arr);

// Test array methods
buss("\n=== Array Test: Methods ===");

// Push method
push(arr, 6);
buss("After push(arr, 6):", arr);

// Push multiple values
push(arr, 7, 8, 9);
buss("After push(arr, 7, 8, 9):", arr);

// Pop method
let popped = pop(arr);
buss("Popped value:", popped);
buss("After pop(arr):", arr);

// Shift method
let shifted = shift(arr);
buss("Shifted value:", shifted);
buss("After shift(arr):", arr);

// Unshift method
unshift(arr, 0);
buss("After unshift(arr, 0):", arr);

// Multiple unshift
unshift(arr, -2, -1);
buss("After unshift(arr, -2, -1):", arr);

// Array length
let len = arrayLength(arr);
buss("Array length:", len);

// Join method
let joined = join(arr, "-");
buss("join(arr, '-'):", joined);

// Includes method
let hasValue = includes(arr, 99);
buss("includes(arr, 99):", hasValue);

let noValue = includes(arr, 1000);
buss("includes(arr, 1000):", noValue);

// Reverse method
reverse(arr);
buss("After reverse(arr):", arr);

buss("\n=== Array Test: Complex Operations ===");

// Create a 2D array (array of arrays)
let grid = [];
push(grid, [1, 2, 3]);
push(grid, [4, 5, 6]);
push(grid, [7, 8, 9]);
buss("2D grid:", grid);

// Access nested array elements
buss("grid[1][1] =", grid[1][1]);

// Modify nested array elements
grid[0][2] = 30;
buss("After grid[0][2] = 30:", grid);

// Insert an element into a nested array
push(grid[2], 10);
buss("After push(grid[2], 10):", grid);

// Create an array of objects
let people = [];
push(people, { name: "Alice", age: 30 });
push(people, { name: "Bob", age: 25 });
push(people, { name: "Charlie", age: 35 });
buss("Array of objects:", people);

// Access object properties in arrays
buss("people[1].name =", people[1].name);

// Modify object properties in arrays
people[0].age = 31;
buss("After people[0].age = 31:", people);

buss("\n=== Array Test: Dynamic Growth ===");

// Test growing an array with sparse elements
let sparse = [];
sparse[0] = 10;
sparse[5] = 50;
buss("Sparse array:", sparse);
buss("sparse.length =", arrayLength(sparse));

sparse[10] = 100;
buss("Updated sparse array:", sparse);
buss("sparse.length =", arrayLength(sparse));

buss("\n=== Array Test: Complete ==="); 